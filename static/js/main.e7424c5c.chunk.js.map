{"version":3,"sources":["components/Header/Header.js","components/PostWrapper/PostWrapper.js","components/Navigate/Navigate.js","components/Post/Post.js","components/CommentList/CommentList.js","components/Comment/Comment.js","components/Warning/Warning.js","services/post.js","containers/PostContainer/PostContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","PostWrapper","_ref","children","Navigate","onClick","postId","disabled","Button","color","content","icon","labelPosition","Post","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","postInfo","title","body","comments","animate","direction","nextProps","_this2","setState","setTimeout","_this$state$postInfo","_this$state","animation","concat","components_CommentList_CommentList","Component","CommentList","commentList","map","comment","index","components_Comment_Comment","name","email","split","key","Comment","Warning","closing","visible","_this$props","message","getPost","axios","get","getComments","PostContainer","showWarning","warningVisibility","fetchPostInfo","asyncToGenerator","regenerator_default","mark","_callee","info","_info$0$data","wrap","_context","prev","next","fetching","Promise","all","service","sent","data","post","t0","stop","_x","apply","arguments","handleNavigateClick","type","components_PostWrapper_PostWrapper","components_Navigate_Navigate","components_Post_Post","components_Warning_Warning","App","components_Header_Header","containers_PostContainer_PostContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e7424c5c.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nconst Header = () => {\n    return <div className=\"Header\">\n        POSTS\n    </div>\n}\n\nexport default Header;","import React from 'react';\nimport './PostWrapper.css';\n\nconst PostWrapper = ({children}) => {\n    return (\n        <div className=\"PostWrapper\">\n            {children}\n        </div>\n    );\n};\n\nexport default PostWrapper;","import React from 'react';\nimport { Button } from 'semantic-ui-react';\nimport './Navigate.css'\n\nconst Navigate = ({onClick, postId, disabled}) => (\n    <div className=\"Navigate\">\n        <Button\n            color=\"teal\"\n            content=\"Previous\"\n            icon=\"left arrow\"\n            labelPosition=\"left\"\n            onClick={\n                () => onClick('PREV')\n            }\n            disabled={disabled} />\n        <div className=\"Navigate-page-num\">\n            {postId}\n        </div>\n        <Button\n            color=\"teal\"\n            content=\"Next\"\n            icon=\"right arrow\"\n            labelPosition=\"right\"\n            className=\"Navigate-right-button\"\n            onClick={\n                () => onClick('NEXT')\n            }\n            disabled={disabled} />\n    </div>\n);\n\nexport default Navigate;","import React, { Component } from 'react';\nimport './Post.css';\nimport { CommentList } from '../';\n\nclass Post extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            postInfo: {\n                title: null, \n                body: null, \n                comments: []\n            },\n            animate: false,\n            direction: 'left'\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        const { title, body, comments } = nextProps;\n\n        if (this.props.postId !== nextProps.postId) {\n            const direction = this.props.postId < nextProps.postId ? 'left' : 'right'\n\n            this.setState({\n                direction,\n                animate: true\n            });\n\n            setTimeout(\n                () => {\n                    this.setState({\n                        postInfo: {\n                            title, body, comments\n                        },\n                        animate: false\n                    })\n                }, 500\n            )\n            return;\n        }\n\n        this.setState({\n            postInfo: {\n                title, body, comments\n            }\n        })\n    }\n\n    render() {\n        const { title, body, comments } = this.state.postInfo;\n        if (title === null) return null;\n\n        const { animate, direction } = this.state;\n\n        const animation = animate\n                        ? (direction === 'left' ? 'bounceOutLeft' : 'bounceOutRight')\n                        : (direction === 'left' ? 'bounceInRight' : 'bounceInLeft');\n        \n        return (\n            <div className={`Post animated ${animation}`}>\n                <h1>{title}</h1>\n                <p>\n                    {body}\n                </p>\n                <CommentList comments={comments}/>\n            </div>\n        );\n    }\n}\n\nexport default Post;","import React from 'react';\nimport './CommentList.css';\nimport { Comment } from '../';\n\nconst CommentList = ({comments}) => {\n\n    const commentList = comments.map(\n        (comment, index) => (\n            <Comment\n                name={comment.email.split('@')[0]}\n                body={comment.body}\n                key={index} />\n        )\n    );\n\n    return (\n        <ul className=\"CommentList\">\n            {commentList}\n        </ul>\n    );\n};\n\nexport default CommentList;","import React from 'react';\nimport './Comment.css';\n\nconst Comment = ({name, body}) => {\n    return (\n        <li className=\"Comment\">\n            <p>\n                <b>{name}</b> {body}\n            </p>\n        </li>\n    );\n}\n\nexport default Comment;","import React, { Component } from 'react';\nimport \"./Warning.css\";\n\nclass Warning extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            closing: false\n        }\n    }\n\n    componentWillReceiveProps (nextProps) {\n        if (this.props.visible && !nextProps.visible) {\n            this.setState({\n                closing: true\n            });\n\n            setTimeout(\n                () => {\n                    this.setState({\n                        closing: false\n                    });\n                }, 500\n            )\n        }\n    }\n\n    render() {\n        const { message, visible } = this.props;\n        const { closing } = this.state;\n\n        if (!visible && !closing) return null;\n        return (\n            <div className=\"Warning-wrapper\">\n                <div className={`Warning ${closing? 'boundOut' : 'bounceIn'} animated`}>\n                    {message}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Warning","import axios from 'axios';\n\nexport function getPost(postId) {\n    return axios.get('https://jsonplaceholder.typicode.com/posts/' + postId);\n}\n\nexport function getComments(postId) {\n    return axios.get(`https://jsonplaceholder.typicode.com/posts/${postId}/comments`);\n}","import React, { Component } from 'react';\nimport { PostWrapper, Navigate, Post, Warning } from '../../components';\nimport * as service from '../../services/post';\n\nclass PostContainer extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            postId: 1,\n            fetching: false,\n            post: {\n                title: null,\n                body: null\n            },\n            comments: [],\n            warningVisibility: false\n        }\n    }\n\n    componentDidMount() {\n        this.fetchPostInfo(1);\n    }\n\n    showWarning = () => {\n        this.setState({\n            warningVisibility: true\n        });\n\n        setTimeout(\n            () => {\n                this.setState({\n                    warningVisibility: false\n                })\n            }, 1500\n        );\n    }\n\n    fetchPostInfo = async (postId) => {\n        \n        this.setState({\n            fetching: true\n        });\n\n        try {\n            const info = await Promise.all([\n                service.getPost(postId),\n                service.getComments(postId)\n            ]);\n    \n            const { title, body } = info[0].data;\n            const comments = info[1].data;\n    \n            this.setState({\n                postId,\n                post: {\n                    title, body\n                },\n                comments,\n                fetching: false\n            });\n        } catch (e) {\n            this.setState({\n                fetching: false\n            });\n            this.showWarning();\n        }\n        \n    }\n\n    handleNavigateClick = (type) => {\n        const postId = this.state.postId;\n\n        if (type === 'NEXT') {\n            this.fetchPostInfo(postId + 1);\n        } else {\n            this.fetchPostInfo(postId - 1);\n        }\n    }\n\n    render() {\n        const { postId, fetching, post, comments, warningVisibility } = this.state;\n\n        return (\n            <PostWrapper>\n                <Navigate \n                    postId={postId}\n                    disabled={fetching}\n                    onClick={this.handleNavigateClick} />\n                <Post \n                    postId={postId}\n                    title={post.title}\n                    body={post.body}\n                    comments={comments} />\n                <Warning visible={warningVisibility} message=\"That post does not exist\" />\n            </PostWrapper>\n        );\n    }\n}\n\nexport default PostContainer;","import React, { Component } from 'react';\nimport { Header } from './components';\nimport { PostContainer } from './containers';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <PostContainer />         \n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport './Animation.css';\nimport Promise from 'promise-polyfill';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nif (!window.Promise) {\n    window.Promise = Promise;\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}